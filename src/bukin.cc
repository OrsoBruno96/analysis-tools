/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "Analysis/Tools/interface/bukin.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 


ClassImp(bukin) 

 bukin::bukin(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _Xp,
                        RooAbsReal& _sp,
                        RooAbsReal& _rho1,
                        RooAbsReal& _rho2,
                        RooAbsReal& _xi) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   Xp("Xp"," Xp",this,_Xp),
   sp("sp"," sp",this,_sp),
   rho1("rho1","rho1",this,_rho1),
   rho2("rho2","rho2",this,_rho2),
   xi("xi","xi",this,_xi)
 { 
 } 


 bukin::bukin(const bukin& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
    Xp("Xp",this,other.Xp),
    sp("sp",this,other.sp),
   rho1("rho1",this,other.rho1),
   rho2("rho2",this,other.rho2),
   xi("xi",this,other.xi)
 { 
 } 



 Double_t bukin::evaluate() const 
 { 
   const Double_t sqr2log2 = TMath::Sqrt(2*TMath::Log(2));
   const Double_t log2 = TMath::Log(2);
   Double_t x1 = Xp + sp*sqr2log2*(xi/TMath::Sqrt(xi + 1) - 1);
   Double_t x2 = Xp + sp*sqr2log2*(xi/TMath::Sqrt(xi + 1) + 1);

   Double_t interno = 0;
  
   if (x < x1) {
     interno = -log2 + rho1*TMath::Power((x - x1)/(Xp - x1), 2);
     Double_t sopra, sotto;
     sopra = xi*TMath::Sqrt(1 + xi*xi)*(x - x1)*sqr2log2;
     sotto = sp*TMath::Log(xi + TMath::Sqrt(1 + xi*xi))*TMath::Power(TMath::Sqrt(1 + xi*xi) - xi, 2);
     interno += sopra/sotto;
   } else if (x > x2) {
     interno = -log2 + rho2*TMath::Power((x - x2)/(Xp - x2), 2);
     Double_t sopra, sotto;
     sopra = xi*TMath::Sqrt(1 + xi*xi)*(x - x2)*sqr2log2;
     sotto = sp*TMath::Log(xi + TMath::Sqrt(1 + xi*xi))*TMath::Power(TMath::Sqrt(1 + xi*xi) + xi, 2);
     interno -= sopra/sotto;
   } else {
     Double_t sopra = TMath::Log(1 + 2*xi*TMath::Sqrt(1 + xi*xi)*(x - Xp)/(sqr2log2 * sp));
     Double_t sotto = TMath::Log(1 + 2*xi*(xi - TMath::Sqrt(xi*xi + 1)));
     Double_t ratio = sopra/sotto;
     interno = -log2*TMath::Power(ratio, 2);
   }

   return TMath::Exp(interno);
 } 



